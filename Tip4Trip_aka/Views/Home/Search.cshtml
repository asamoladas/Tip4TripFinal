@model Tip4Trip_aka.ViewModels.HousesDates
@{
    ViewBag.Title = "Searching";
}

@*<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" />*@
<link href="~/Content/Site.css" rel="stylesheet" />
<link href="~/Content/Mitsos.css" rel="stylesheet" />
<br /><br />
<body id="home-back-img">
</body>
<style>
    .center {
        text-align: right;
    }

    .topleft {
        position: absolute;
        top: 195px;
        left: 19px;
        font-size: 18px;
        font-weight: bold;
        color: ghostwhite;
        text-shadow: 0px 0px 6px #17D687;
    }

</style>
<head>
    <script>
        $(function () {
            var dateFormat = "mm/dd/yy",
                from = $("#Sstartdate")
                    .datepicker({
                        defaultDate: "+1w",
                        changeMonth: true,
                        numberOfMonths: 2
                    })
                    .on("change", function () {
                        to.datepicker("option", "minDate", getDate(this));
                    }),
                to = $("#Enddate").datepicker({
                    defaultDate: "+1w",
                    changeMonth: true,
                    numberOfMonths: 2
                })
                    .on("change", function () {
                        from.datepicker("option", "maxDate", getDate(this));
                    });
            function getDate(element) {
                var date;
                try {
                    date = $.datepicker.parseDate(dateFormat, element.value);
                } catch (error) {
                    date = null;
                }
                return date;
            }
        });
    </script>
    <script>
        $(function () {
            $.widget("custom.combobox", {
                _create: function () {
                    this.wrapper = $("<span>")
                        .addClass("custom-combobox")
                        .insertAfter(this.element);
                    this.element.hide();
                    this._createAutocomplete();
                    this._createShowAllButton();
                },
                _createAutocomplete: function () {
                    var selected = this.element.children(":selected"),
                        value = selected.val() ? selected.text() : "";
                    this.input = $("<input>")
                        .appendTo(this.wrapper)
                        .val(value)
                        .attr("title", "")
                        .attr("placeholder", "Search with Location...")
                        .addClass("custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left")
                        .autocomplete({
                            delay: 0,
                            minLength: 0,
                            source: $.proxy(this, "_source")
                        })
                        .tooltip({
                            classes: {
                                "ui-tooltip": "ui-state-highlight"
                            }
                        });
                    this._on(this.input, {
                        autocompleteselect: function (event, ui) {
                            ui.item.option.selected = true;
                            this._trigger("select", event, {
                                item: ui.item.option
                            });
                        },
                        autocompletechange: "_removeIfInvalid"
                    });
                },
                _createShowAllButton: function () {
                    var input = this.input,
                        wasOpen = false;
                    $("<a>")
                        .attr("tabIndex", -1)
                        .attr("title", "Show all available locations")
                        .tooltip()
                        .appendTo(this.wrapper)
                        .button({
                            icons: {
                                primary: "ui-icon-triangle-1-s"
                            },
                            text: false
                        })
                        .removeClass("ui-corner-all")
                        .addClass("custom-combobox-toggle ui-corner-right")
                        .on("mousedown", function () {
                            wasOpen = input.autocomplete("widget").is(":visible");
                        })
                        .on("click", function () {
                            input.trigger("focus");
                            // Close if already visible
                            if (wasOpen) {
                                return;
                            }
                            // Pass empty string as value to search for, displaying all results
                            input.autocomplete("search", "");
                        });
                },
                _source: function (request, response) {
                    var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
                    response(this.element.children("option").map(function () {
                        var text = $(this).text();
                        if (this.value && (!request.term || matcher.test(text)))
                            return {
                                label: text,
                                value: text,
                                option: this
                            };
                    }));
                },
                _removeIfInvalid: function (event, ui) {
                    // Selected an item, nothing to do
                    if (ui.item) {
                        return;
                    }
                    // Search for a match (case-insensitive)
                    var value = this.input.val(),
                        valueLowerCase = value.toLowerCase(),
                        valid = false;
                    this.element.children("option").each(function () {
                        if ($(this).text().toLowerCase() === valueLowerCase) {
                            this.selected = valid = true;
                            return false;
                        }
                    });
                    // Found a match, nothing to do
                    if (valid) {
                        return;
                    }
                    // Remove invalid value
                    this.input
                        .val("")
                        .attr("title", value + " didn't match any item")
                        .tooltip("open");
                    this.element.val("");
                    this._delay(function () {
                        this.input.tooltip("close").attr("title", "");
                    }, 2500);
                    this.input.autocomplete("instance").term = "";
                },
                _destroy: function () {
                    this.wrapper.remove();
                    this.element.show();
                }
            });
            $("#combobox").combobox();
            $("#toggle").on("click", function () {
                $("#combobox").toggle();
            });
        });
    </script>
</head>

<style>
    .custom-combobox {
        position: relative;
        display: inline-block;
    }

    .custom-combobox-toggle {
        position: absolute;
        top: 0;
        bottom: 0;
        margin-left: -1px;
        padding: 0;
    }

    .custom-combobox-input {
        margin: 1;
        padding: 5px 5px;
    }
</style>
<body>

    <form method="GET">
        @*<input type="text" id="locationsearch" placeholder="Search with location..." name="searching" />*@
        <div> @*class="container">*@
            <select id="combobox" name="searching" placeholder="Search with location...">
                <option value="">Select your option</option>
                <option value="Ampelokipoi">Ampelokipoi</option>
                <option value="Evosmos">Evosmos</option>
                <option value="Halkidiki">Halkidiki</option>
                <option value="Harilaou">Harilaou</option>
                <option value="Kozani">Kozani</option>
                <option value="Larissa">Larissa</option>
                <option value="Thessaloniki">Thessaloniki</option>
                <option value="Trikala">Trikala</option>
            </select>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <input type="text" id="Sstartdate" name="Sstartdate" placeholder="Check In">
            <input type="text" id="Enddate" name="Enddate" placeholder="Check Out">
            @*<label for="occupantsearch">Number of Occupants</label>*@
            <input type="number" id="occupantsearch" name="occupantsearch" placeholder="Number of Occupants" min="1" max="10">
            <br />
            <br />
            <input type="submit" class="btn btn-primary" value="T4Trip Search" />
        </div>
        <br />
        @*<div class="container">
            <input type="text" id="Sstartdate" name="Sstartdate" placeholder="Check In">
            <input type="text" id="Enddate" name="Enddate" placeholder="Check Out">*@
            @*<label for="occupantsearch">Number of Occupants</label>*@
            @*<input type="number" id="occupantsearch" name="occupantsearch" placeholder="Number of Occupants" min="1" max="10">*@

            @*<label for="speed">Select a speed</label>
                <select name="searching" id="speed">
                    <option selected="selected">Search Location</option>
                    <option>Kalamaria</option>
                    <option>Evosmos</option>
                    <option>Fast</option>
                    <option>Faster</option>
                </select>*@
            @*<br />
            <br />
            <input type="submit" class="btn btn-primary" value="T4Trip Search" />
        </div>*@
    </form>
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">Search results</h3>
        </div>
        <div class="panel-body">
            <div class="row">
                @if (Model.houses.Count() == 0)
                {
                    <p colspan="3" style="color:red">
                        Try a new Search
                        <br />
                        <br />
                        @*@Html.ActionLink("Try a new Search", "Index", "Home")*@
                    </p>
                }
                else
                {
                    foreach (Tip4Trip_aka.Models.House item in Model.houses)
                    {
                        <div class="col-xs-6 col-md-3">
                            @if (Model.HouseImages.Where(c => c.housId == item.Id).Count() == 0)
                            {
                                <a href="@Url.Action("Details", "Houses",new { id = item.Id })" class="thumbnail">
                                    <img src="https://images.unsplash.com/photo-1475855581690-80accde3ae2b" alt="Pic">
                                </a>
                            }

                            @foreach (var obje in Model.HouseImages.Where(c => c.housId == item.Id))
                            {
                                if (obje.ImagePath != null)
                                {
                                    string FileName = Path.GetFileNameWithoutExtension(obje.ImagePath);

                                    //To Get File Extension
                                    string FileExtension = Path.GetExtension(obje.ImagePath);

                                    //Add Current Date To Attached File Name
                                    FileName = FileName.Trim() + FileExtension;

                                <a href="@Url.Action("Details", "Houses",new { id = item.Id })" class="thumbnail">
                                    <img src="../../UserImages/@FileName" alt="Pic">
                                    <div class="topleft">Click here for more details</div>

                                </a>


                            }
                                break;
                            }
                            <ul>
                                <li>House Title: @item.Title</li>
                                <li>Location:@item.Location.NameCity </li>
                                <li>Maximum occupancy:@item.MaxOccupancy </li>
                                <li>Price per night:@item.PriceperNight </li>
                                <li><div class="Textoverflow">@item.Description</div></li>
                            </ul>

                            @if (Model.reservations.Where(mn => mn.HouseId == item.Id).Count() == 0)
                            {
                                <b>Available </b>}
                            @if (Model.reservations.Where(mn => mn.HouseId == item.Id).Count() != 0)
                            {

                                <b>This property is reserved for the following dates:</b>

                            }
                            @foreach (Tip4Trip_aka.Models.Reservation itemres in Model.reservations.Where(mn => mn.HouseId == item.Id))
                            {




                                <ul>
                                    <li>From: @itemres.StartDate.Date.ToShortDateString() </li>
                                    <li>To: @itemres.EndDate.Date.ToShortDateString() </li>
                                </ul>


                            }
                            <p> @Html.ActionLink("Book now", "Create", "Reservations", new { HouseId = item.Id, Occupants = item.MaxOccupancy, PricePerNightCharged = item.PriceperNight, DateOfBooking = DateTime.Today }, new { @class = "btn btn-default" })</p>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</body>





    @*<div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">Search results</h3>
        </div>
        <div class="panel-body">
            <div class="row">
                @if (Model.houses.Count() == 0)
                {
                    <p colspan="3" style="color:red">
                        No match
                        <br />
                        <br />
                        @Html.ActionLink("Try a new Search", "Index", "Home")
                    </p>
                }
                else
                {
                    foreach (Tip4Trip_aka.Models.House item in Model.houses)
                    {
                        <div class="col-xs-6 col-md-3">
                            @if (Model.HouseImages.Where(c => c.housId == item.Id).Count() == 0)
                            {
                                <a href="@Url.Action("Details", "Houses",new { id = item.Id })" class="thumbnail">
                                    <img src="https://images.unsplash.com/photo-1475855581690-80accde3ae2b" alt="Pic">
                                </a>
                            }

                            @foreach (var obje in Model.HouseImages.Where(c => c.housId == item.Id))
                            {
                                if (obje.ImagePath != null)
                                {
                                    string FileName = Path.GetFileNameWithoutExtension(obje.ImagePath);

                                    //To Get File Extension
                                    string FileExtension = Path.GetExtension(obje.ImagePath);

                                    //Add Current Date To Attached File Name
                                    FileName = FileName.Trim() + FileExtension;

                                    <a href="@Url.Action("Details", "Houses",new { id = item.Id })" class="thumbnail">
                                        <img src="../../UserImages/@FileName" alt="Pic">
                                    </a>


                                }
                                break;
                            }
                            <ul>
                                <li>House Title: @item.Title</li>
                                <li>Location:@item.Location.NameCity </li>
                                <li>Maximum occupancy:@item.MaxOccupancy </li>
                                <li>Price per night:@item.PriceperNight </li>
                                <li><div class="Textoverflow">@item.Description</div></li>
                            </ul>
                            <p> @Html.ActionLink("Book me now !", "Create", "Reservations", new { HouseId = item.Id, Occupants = item.MaxOccupancy, PricePerNightCharged = item.PriceperNight, DateOfBooking = DateTime.Today }, new { @class = "btn btn-default" })</p>
                            @if (Model.reservations.Where(mn => mn.HouseId == item.Id).Count() == 0)
                            {
                                <th>Available !!</th>}
                            @if (Model.reservations.Where(mn => mn.HouseId == item.Id).Count() != 0)
                            {

                                <h6 style="background-color:Tomato;">This property is reserved for the following dates</h6>}
                            @foreach (Tip4Trip_aka.Models.Reservation itemres in Model.reservations.Where(mn => mn.HouseId == item.Id))
                            {




                                <li>
                                    From:
                                    @itemres.StartDate.Date.ToShortDateString()
                                    To:
                                    @itemres.EndDate.Date.ToShortDateString()
                                </li>
                                <br />

                            }
                        </div>
                    }
                }
            </div>
        </div>
    </div>*@
